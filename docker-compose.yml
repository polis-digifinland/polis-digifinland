# Before running docker compose up for the first time,
# first copy the env.example file to .env and fill in the values.
# `cp env.example digifinland-dev.env`
# (edit values as needed)
#
# Then, build and run with:
# `docker compose build`
# `docker compose up`
#
# Subsequently you should only need to run:
# `docker compose up`
#
# Force a full re-build with no cache from previous builds:
# `docker compose build --no-cache`
# `docker compose up`
#
# If you only changed the .env file, you can do a quick rebuild:
# `docker compose up --force-recreate`
#
# To stop, press CTRL+C (if not running in --detach mode), or run:
# `docker compose down`

services:
  df-participation:
    build:
      context: ./df-participation
      dockerfile: Dockerfile
      args:
        NODE_ENV: "production"
        BUILD_VERSION: "compose"
        BUILD_DATE: "Tänään"
        NEXT_PUBLIC_EXTERNAL_API_BASE_URL: "https://polis.local"
    depends_on:
      - "server"
    networks:
      - "polis-net"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    ports:
     - 4000:3000
  server:
    env_file: .env
    image: docker.io/compdem/polis-server:${DOCKER_ENV:-dev}
    build:
      context: ./polis/server
      dockerfile: Dockerfile
      labels:
        polis_tag: ${DOCKER_ENV:-dev}
    depends_on:
      - "postgres"
      - "file-server"
    networks:
      - "polis-net"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: on-failure
    ports:
     - 5000:5000
# if needed, comment out above port mapping and uncomment following to expose ports 5000-5005
# this was needed for VM based setup to allow usage of external nginx as load balancer.
#      - target: 5000
#        published: 5000-5005
#        protocol: tcp
#        mode: ingress
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first      
      restart_policy:
        condition: always
        delay: 5s
        # max_attempts: 3
        window: 120s  

  math:
    container_name: polis-math
    image: docker.io/compdem/polis-math:${DOCKER_ENV:-dev}
    depends_on:
      - "postgres"
    build:
      context: ./polis/math
      labels:
        polis_tag: ${DOCKER_ENV:-dev}
    environment:
      - DATABASE_URL=${DATABASE_URL:?error}
      - MATH_ENV=${MATH_ENV:-dev}
      - WEBSERVER_USERNAME=${WEBSERVER_USERNAME:?error}
      - WEBSERVER_PASS=${WEBSERVER_PASS:?error}        
    networks:
      - "polis-net"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        # max_attempts: 3
        window: 120s        

  # postgres:
  #   container_name: polis-postgres
  #   env_file: ./polis/server/docker-db-dev.env
  #   image: docker.io/compdem/polis-postgres:${TAG}
  #   restart: always
  #   build:
  #     context: ./server
  #     dockerfile: Dockerfile-db
  #   networks:
  #     - "polis-net"
  #   volumes:
  #     - "backups:/backups"
  #     - "postgres:/var/lib/postgresql/data"

  postgres:
    image: docker.io/compdem/polis-postgres:${TAG:-dev}
    restart: always
    build:
      context: ./polis/server
      dockerfile: Dockerfile-db
      labels:
        polis_tag: ${TAG:-dev}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?error}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
      - POSTGRES_USER=${POSTGRES_USER:?error}
    networks:
      - "polis-net"
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    volumes:
      - "backups:/backups"
      - "postgres:/var/lib/postgresql/data"      

  # nginx-proxy:
  polis.local:
    container_name: polis-nginx-proxy
    image: docker.io/compdem/polis-nginx-proxy:${TAG}
    build:
      context: ./polis/file-server
      dockerfile: nginx.Dockerfile
    environment:
      - TAG
    depends_on:
      - "server"
      - "df-participation"
    restart: unless-stopped
    networks:
      - "polis-net"
    ports:
      - ${HTTP_PORT:-80}:${HTTP_PORT:-80}
      - ${HTTPS_PORT:-443}:${HTTPS_PORT:-443}

  file-server:
    # container_name: polis-file-server
    image: docker.io/compdem/polis-file-server:${DOCKER_ENV:-dev}
    build:
      context: ./polis/
      dockerfile: file-server/Dockerfile
      labels:
        polis_tag: ${DOCKER_ENV:-dev}
      args:
        GIT_HASH: "${GIT_HASH:-placeholder}"
        SERVICE_URL: ${SERVICE_URL}
    environment:
      - EMBED_SERVICE_HOSTNAME=${EMBED_SERVICE_HOSTNAME}
      #- FB_APP_ID=${FB_APP_ID}
      - PORT=${STATIC_FILES_PORT:-8080}
      - REPORT_UPLOADER=${REPORT_UPLOADER:-local}
      #- SERVICE_URL=${SERVICE_URL}
      #- REPORT_SERVICE_URL=${REPORT_SERVICE_URL}
      - S3_BUCKET_PREPROD=${S3_BUCKET_PREPROD}
      - S3_BUCKET_PROD=${S3_BUCKET_PROD}
      - SCP_SUBDIR_PREPROD=${SCP_SUBDIR_PREPROD}
      - SCP_SUBDIR_PROD=${SCP_SUBDIR_PROD}
    networks:
      - "polis-net"
    deploy:
      restart_policy:
        condition: always
        delay: 5s
        # max_attempts: 3
        window: 120s              

networks:
  polis-net:

volumes:
  backups:
  postgres:
